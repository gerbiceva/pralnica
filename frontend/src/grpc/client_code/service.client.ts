// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size
// @generated from protobuf file "service.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { WeatherService } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Weather } from "./service";
import type { Void } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service WeatherService
 */
export interface IWeatherServiceClient {
    /**
     * get the list of nodes that the server supports along with their descriptions
     *
     * @generated from protobuf rpc: GetWeather(Void) returns (Weather);
     */
    getWeather(input: Void, options?: RpcOptions): UnaryCall<Void, Weather>;
}
/**
 * @generated from protobuf service WeatherService
 */
export class WeatherServiceClient implements IWeatherServiceClient, ServiceInfo {
    typeName = WeatherService.typeName;
    methods = WeatherService.methods;
    options = WeatherService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * get the list of nodes that the server supports along with their descriptions
     *
     * @generated from protobuf rpc: GetWeather(Void) returns (Weather);
     */
    getWeather(input: Void, options?: RpcOptions): UnaryCall<Void, Weather> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Void, Weather>("unary", this._transport, method, opt, input);
    }
}
