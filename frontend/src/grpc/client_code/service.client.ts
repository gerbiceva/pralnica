// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size
// @generated from protobuf file "service.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PralnicaService } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Nekaj } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service PralnicaService
 */
export interface IPralnicaServiceClient {
    /**
     * get the list of nodes that the server supports along with their descriptions
     *
     * @generated from protobuf rpc: Hello(Nekaj) returns (Nekaj);
     */
    hello(input: Nekaj, options?: RpcOptions): UnaryCall<Nekaj, Nekaj>;
}
/**
 * @generated from protobuf service PralnicaService
 */
export class PralnicaServiceClient implements IPralnicaServiceClient, ServiceInfo {
    typeName = PralnicaService.typeName;
    methods = PralnicaService.methods;
    options = PralnicaService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * get the list of nodes that the server supports along with their descriptions
     *
     * @generated from protobuf rpc: Hello(Nekaj) returns (Nekaj);
     */
    hello(input: Nekaj, options?: RpcOptions): UnaryCall<Nekaj, Nekaj> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Nekaj, Nekaj>("unary", this._transport, method, opt, input);
    }
}
