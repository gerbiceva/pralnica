// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package pralnicaDb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const banUser = `-- name: BanUser :exec
UPDATE users
SET disabled = TRUE
WHERE uuid = $1
`

func (q *Queries) BanUser(ctx context.Context, uuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, banUser, uuid)
	return err
}

const confirmUser = `-- name: ConfirmUser :exec
UPDATE users
SET confirmed = TRUE
WHERE uuid = $1
`

func (q *Queries) ConfirmUser(ctx context.Context, uuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, confirmUser, uuid)
	return err
}

const deleteReservation = `-- name: DeleteReservation :exec
DELETE FROM reservations
WHERE id = $1
`

func (q *Queries) DeleteReservation(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteReservation, id)
	return err
}

const editUser = `-- name: EditUser :exec
UPDATE users
SET phone = $2,
    name = $3,
    surname = $4,
    room = $5,
    email = $6,
    role = $7
WHERE uuid = $1
`

type EditUserParams struct {
	Uuid    pgtype.UUID
	Phone   string
	Name    string
	Surname string
	Room    int32
	Email   string
	Role    string
}

func (q *Queries) EditUser(ctx context.Context, arg EditUserParams) error {
	_, err := q.db.Exec(ctx, editUser,
		arg.Uuid,
		arg.Phone,
		arg.Name,
		arg.Surname,
		arg.Room,
		arg.Email,
		arg.Role,
	)
	return err
}

const getReservationsByMonth = `-- name: GetReservationsByMonth :many
SELECT get_reservations_by_month FROM get_reservations_by_month($1)
`

func (q *Queries) GetReservationsByMonth(ctx context.Context, month pgtype.Date) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, getReservationsByMonth, month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var get_reservations_by_month interface{}
		if err := rows.Scan(&get_reservations_by_month); err != nil {
			return nil, err
		}
		items = append(items, get_reservations_by_month)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT uuid, phone, name, surname, room, email, disabled, confirmed, role, created_at, updated_at
FROM users
WHERE uuid = $1
`

func (q *Queries) GetUser(ctx context.Context, uuid pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, uuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Phone,
		&i.Name,
		&i.Surname,
		&i.Room,
		&i.Email,
		&i.Disabled,
		&i.Confirmed,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserReservations = `-- name: GetUserReservations :many
SELECT get_user_reservations FROM get_user_reservations($1)
`

func (q *Queries) GetUserReservations(ctx context.Context, userUuid pgtype.UUID) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, getUserReservations, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var get_user_reservations interface{}
		if err := rows.Scan(&get_user_reservations); err != nil {
			return nil, err
		}
		items = append(items, get_user_reservations)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT uuid, phone, name, surname, room, email, disabled, confirmed, role, created_at, updated_at
FROM users
ORDER BY uuid
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Uuid,
			&i.Phone,
			&i.Name,
			&i.Surname,
			&i.Room,
			&i.Email,
			&i.Disabled,
			&i.Confirmed,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUsers = `-- name: SearchUsers :many
SELECT search_users FROM search_users($1)
`

func (q *Queries) SearchUsers(ctx context.Context, searchText string) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, searchUsers, searchText)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var search_users interface{}
		if err := rows.Scan(&search_users); err != nil {
			return nil, err
		}
		items = append(items, search_users)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
